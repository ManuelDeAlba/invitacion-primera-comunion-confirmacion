<section class="relative rounded-md">
    <div class="triangulo w-full h-50 bg-amber-500 shadow-lg"></div>
    <form id="form-mensaje" class="bg-amber-500">
        <div class="form flex flex-col justify-center items-center gap-4 bg-white mx-8 p-8 rounded-md shadow-lg">
            <h2 class="text-lg">¿Quieres dejar un mensaje para Kimi?</h2>
            <div class="w-[90%]">
                <label for="inputMensaje">Nombre:</label>
                <input type="text" id="inputNombre" name="nombre" class="w-full outline-none p-2 border-2 rounded-md" required />
            </div>
            <div class="w-[90%]">
                <label for="inputMensaje">Mensaje:</label>
                <textarea id="inputMensaje" name="mensaje" class="w-full max-h-40 outline-none p-2 border-2 rounded-md field-sizing-content resize-none" required></textarea>
            </div>
            <button id="btnEnviarMensaje" type="submit" class="bg-amber-500 hover:bg-amber-600 disabled:bg-amber-800 text-white w-fit py-2 px-8 rounded-md">Enviar mensaje</button>
        </div>
    </form>
    <div class="bg-amber-500 rounded-b-md overflow-hidden">
        <div class="sombra">
            <div class="triangulo w-full h-40 bg-amber-500 shadow-md drop-shadow-md"></div>
        </div>
    </div>
</section>

<style>
    .sombra{
        filter: drop-shadow(0 -5px 5px rgba(0, 0, 0, 0.1));
    }
    .form{
        clip-path: polygon(0% 0%, 0% 70%, 50% 100%, 100% 70%, 100% 0%);
    }
    .triangulo{
        clip-path: polygon(0% 100%, 0% 85%, 50% 0%, 100% 85%, 100% 100%);

    }
</style>

<script>
    import { showToast } from "@/lib/toast";

    const form = document.getElementById('form-mensaje') as HTMLFormElement;
    const inputNombre = document.getElementById('inputNombre') as HTMLInputElement;
    const inputMensaje = document.getElementById('inputMensaje') as HTMLTextAreaElement;
    const btnEnviarMensaje = document.getElementById('btnEnviarMensaje') as HTMLButtonElement;

    form.addEventListener('submit', async (e) => {
        e.preventDefault();
        const nombre = inputNombre.value.trim();
        const mensaje = inputMensaje.value.trim();

        // Validar campos
        if(!nombre || !mensaje) {
            return showToast({
                mensaje: "Por favor completa todos los campos del mensaje.",
                tipo: "error",
            });
        }

        // Deshabilitar botón mientras se envía el mensaje
        btnEnviarMensaje.disabled = true;
        btnEnviarMensaje.textContent = "Enviando...";

        // Enviar mensaje a la base de datos
        let element;
        try{
            const res = await fetch("/api/mensaje", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ nombre, mensaje }),
            });
            element = showToast({
                mensaje: "Enviando mensaje...",
                tipo: "info"
            });
            if (!res.ok) {
                // Si la respuesta no es exitosa, mostrar error
                return showToast({
                    elemento: element,
                    mensaje: "Error al enviar el mensaje, por favor intenta de nuevo más tarde.",
                    tipo: "error",
                });
            }
            
            // Si el mensaje se envió correctamente, mostrar mensaje de éxito
            showToast({
                elemento: element,
                mensaje: "Gracias por enviar tu mensaje",
                tipo: "success",
            });

            // Limpiar campos del formulario
            form.reset();
        } catch(error){
            showToast({
                elemento: element,
                mensaje: "Error al enviar el mensaje, por favor intenta de nuevo más tarde.",
                tipo: "error",
            });
        } finally {
            btnEnviarMensaje.disabled = false;
            btnEnviarMensaje.textContent = "Enviar mensaje";
        }
    });
</script>