---
import Layout from "@/layouts/Layout.astro";

import { obtenerAsistencia, obtenerEnviosAsistencia, obtenerListaAsistencias, obtenerMensajes } from "@/firebase";
import FlechaIzquierda from "@/icons/FlechaIzquierda.astro";
import Salir from "@/icons/Salir.astro";
import BotonBorrarAsistencia from "@/components/admin/BotonBorrarAsistencia.astro";
import BotonBorrarMensaje from "@/components/admin/BotonBorrarMensaje.astro";

const totalAsistencias = await obtenerAsistencia();
const totalEnviosAsistencia = await obtenerEnviosAsistencia();

const asistencias = await obtenerListaAsistencias();
const mensajes = await obtenerMensajes();

const dateFormatter = new Intl.DateTimeFormat("es-MX", {
    dateStyle: "medium",
    timeStyle: "short",
});
const longDateFormatter = new Intl.DateTimeFormat("es-MX", {
    dateStyle: "medium",
    timeStyle: "long",
});

const rol: string | null = Astro.locals.rol;
---

<Layout>
    <main class="py-8 space-y-8">
        <div class="w-[90%] max-w-3xl mx-auto flex justify-between items-center">
            <a href="/" class="text-amber-500 hover:text-amber-600 transition-colors flex items-center gap-2 hover:underline">
                <FlechaIzquierda />
                Inicio
            </a>
            <button id="btnSalir" class="flex items-center gap-2 bg-amber-600 hover:bg-amber-700 text-white px-4 py-2 rounded-md transition-colors">
                <Salir />
                Salir
            </button>
        </div>

        <div class="w-[90%] max-w-3xl bg-white mx-auto flex flex-col justify-center items-center gap-4 p-8 rounded-md">
            <h2 class="text-lg font-bold text-black/80">Asistencias totales:</h2>
            <span class="text-5xl font-bold text-amber-600" id="span-asistencias">0</span>
            <span class="text-black/80 self-end text-sm text-right" id="span-respuestas" data-respuestas={totalEnviosAsistencia}>{totalEnviosAsistencia} {totalEnviosAsistencia === 1 ? "persona envió su respuesta" : "personas enviaron sus respuestas"}</span>

            {
                rol == "admin" && (
                    <label class="peer hover:underline cursor-pointer self-end text-black/80">
                        Ver asistencias
                        <input type="checkbox" class="hidden" />
                    </label>
                    <div class="hidden w-full peer-has-[:checked]:flex flex-col gap-4">
                        {
                            asistencias.map(({userid, id, fecha, invitados}: any) => {
                                const mensajesPersona = mensajes.filter(mensaje => userid && mensaje.userid && mensaje.userid == userid);
                                const nombres = Array.from(new Set(mensajesPersona.map(mensaje => mensaje.nombre))).join(", ");
                                return (
                                    <div class="w-full p-2 flex flex-col gap-1 border-2 border-slate-300 rounded-md">
                                        <span>{fecha}</span>
                                        <p>Invitados: {invitados}</p>
                                        <p data-long-fecha={fecha}>Fecha: {longDateFormatter.format(new Date(parseInt(fecha)))}</p>
                                        {
                                            mensajesPersona.length > 0 && (
                                                <span>Mensajes: {nombres}</span>
                                            )
                                        }
                                        <BotonBorrarAsistencia data-id={id} data-invitados={invitados} data-borrar-asistencia class="bg-red-500 hover:bg-red-600 text-white px-4 py-1 rounded-md">Borrar</BotonBorrarAsistencia>
                                    </div>
                                )
                            })
                        }
                    </div>
                )
            }
        </div>

        <div class="w-[90%] max-w-3xl bg-white mx-auto flex flex-col justify-center gap-4 p-8 rounded-md">
            <h2 class="text-lg font-bold text-black/80">
                Mensajes 
                <span class="text-sm text-black/60" id="span-mensajes" data-mensajes={mensajes.length}>( {mensajes.length} )</span>:
            </h2>
            {
                mensajes.length > 0 ? (
                    mensajes.map(mensaje => {
                        const asistenciasPersona = asistencias.find(asistencia => asistencia.userid && mensaje.userid && asistencia.userid == mensaje.userid);
                        const invitados = asistenciasPersona ? asistenciasPersona.invitados : null;
                        return (
                            <div class="w-full space-y-2 p-4 bg-amber-50 rounded-md shadow-md">
                                <p class="font-bold text-black/80">
                                    <span>{mensaje.nombre}</span>
                                    {
                                        Boolean(invitados) && (
                                            <span class="text-gray-500 text-xs">({invitados} {invitados == 1 ? "invitado" : "invitados"})</span>        
                                        )
                                    }
                                </p>
                                {
                                    rol == "admin" && mensaje.userid && (
                                        <span class="text-gray-500 text-xs">userID: {mensaje.userid}</span>
                                    )
                                }
                                <p class="text-gray-500 text-sm text-right" data-fecha={mensaje.fecha}>{dateFormatter.format(new Date(mensaje.fecha))}</p>
                                <p>{mensaje.mensaje}</p>
                                {
                                    rol == "admin" && (
                                        <BotonBorrarMensaje data-id={mensaje.id} data-borrar-mensaje class="block ml-auto bg-red-500 hover:bg-red-600 text-white px-4 py-1 rounded-md">
                                            Borrar
                                        </BotonBorrarMensaje>
                                    )
                                }
                            </div>
                        )
                    })
                ) : (
                    <p class="text-gray-500">No hay mensajes aún.</p>
                )
            }
        </div>
    </main>
</Layout>

<script define:vars={{ totalAsistencias }}>
    const spanAsistencias = document.getElementById('span-asistencias');

    let contador = 0;
    
    // Contador para mostrar las asistencias de forma progresiva
    let intervalo = setInterval(() => {
        if(contador > totalAsistencias) {
            contador = totalAsistencias;
            clearInterval(intervalo);
            return;
        }
        spanAsistencias.textContent = contador.toString();
        contador++;
    }, 1000 / totalAsistencias)
</script>

<script>
    const btnSalir = document.getElementById('btnSalir') as HTMLButtonElement;

    // Boton para cerrar sesión
    btnSalir.addEventListener("click", async () => {
        const res = await fetch("/api/inicio-sesion", {
            method: "DELETE"
        })
        if(res.redirected) window.location.href = res.url;
    })

    // Actualizar la fecha de los mensajes con el timezone y locale correcto
    const locale = Intl.DateTimeFormat().resolvedOptions().locale;
    const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
    
    const fechasMensajes = document.querySelectorAll<HTMLElement>("[data-fecha]");
    fechasMensajes.forEach(fecha => {
        const dateFormatter = new Intl.DateTimeFormat(locale, {
            dateStyle: "medium",
            timeStyle: "short",
            timeZone: timezone
        });
        if(!fecha.dataset.fecha) return;
        fecha.textContent = dateFormatter.format(new Date(parseInt(fecha.dataset.fecha)));
    });

    const longFechasMensajes = document.querySelectorAll<HTMLElement>("[data-long-fecha]");
    longFechasMensajes.forEach(fecha => {
        const longDateFormatter = new Intl.DateTimeFormat(locale, {
            dateStyle: "medium",
            timeStyle: "long",
            timeZone: timezone
        });
        if(!fecha.dataset.longFecha) return;
        fecha.textContent = longDateFormatter.format(new Date(parseInt(fecha.dataset.longFecha)));
    });
</script>